syntax = "proto3";

package grpc;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";

message Contract {
    google.protobuf.Timestamp since = 1;
    google.protobuf.Timestamp until = 2;
    Rate rate = 3;
    uint32 requests = 4;
    uint32 workplaces = 5;
}

message Rate {
    uint32 value = 1;
    enum Unit {
        rps = 0;
        rpm = 1;
        rph = 2;
        rpd = 3;
        rpw = 4;
    }
    Unit unit = 2;
}

message RegisterLicenseRequest {
    string id = 1;
    Contract contract = 2;
}

message RegisterLicenseResponse {
    string id = 1;
}

message CreateLicenseRequest {
    string id = 1;
    Contract contract = 2;
}

message CreateLicenseResponse {
    string id = 1;
    google.protobuf.Timestamp created_at = 2;
}

message ReadLicenseRequest {
    string id = 1;
}

message ReadLicenseResponse {
    string id = 1;
    Contract contract = 2;
    google.protobuf.Timestamp created_at = 3;
    google.protobuf.Timestamp updated_at = 4;
    google.protobuf.Timestamp deleted_at = 5;
}

message UpdateLicenseRequest {
    string id = 1;
    Contract contract = 2;
}

message UpdateLicenseResponse {
    string id = 1;
    google.protobuf.Timestamp updated_at = 2;
}

message DeleteLicenseRequest {
    string id = 1;
}

message DeleteLicenseResponse {
    string id = 1;
    google.protobuf.Timestamp deleted_at = 2;
}

message RestoreLicenseRequest {
    string id = 1;
}

message RestoreLicenseResponse {
    string id = 1;
    google.protobuf.Timestamp updated_at = 2;
}

service License {
    rpc Register (RegisterLicenseRequest) returns (RegisterLicenseResponse) {
        option (google.api.http) = {
            post: "/api/v1/license/register"
            body: "*"
        };
    }
    rpc Create (CreateLicenseRequest) returns (CreateLicenseResponse) {
        option (google.api.http) = {
            post: "/api/v1/license"
            body: "*"
        };
    }
    rpc Read (ReadLicenseRequest) returns (ReadLicenseResponse) {
        option (google.api.http) = {
            get: "/api/v1/license/{id}"
        };
    }
    rpc Update (UpdateLicenseRequest) returns (UpdateLicenseResponse) {
        option (google.api.http) = {
            put: "/api/v1/license/{id}"
            body: "*"
        };
    }
    rpc Delete (DeleteLicenseRequest) returns (DeleteLicenseResponse) {
        option (google.api.http) = {
            delete: "/api/v1/license/{id}"
        };
    }
    rpc Restore (RestoreLicenseRequest) returns (RestoreLicenseResponse) {
        option (google.api.http) = {
            patch: "/api/v1/license/{id}"
        };
    }
}

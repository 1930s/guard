// Code generated by protoc-gen-go. DO NOT EDIT.
// source: license.proto

package grpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ReadLicenseRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReadLicenseRequest) Reset()         { *m = ReadLicenseRequest{} }
func (m *ReadLicenseRequest) String() string { return proto.CompactTextString(m) }
func (*ReadLicenseRequest) ProtoMessage()    {}
func (*ReadLicenseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_090c1f856632b222, []int{0}
}
func (m *ReadLicenseRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReadLicenseRequest.Unmarshal(m, b)
}
func (m *ReadLicenseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReadLicenseRequest.Marshal(b, m, deterministic)
}
func (m *ReadLicenseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadLicenseRequest.Merge(m, src)
}
func (m *ReadLicenseRequest) XXX_Size() int {
	return xxx_messageInfo_ReadLicenseRequest.Size(m)
}
func (m *ReadLicenseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadLicenseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReadLicenseRequest proto.InternalMessageInfo

func (m *ReadLicenseRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type ReadLicenseResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReadLicenseResponse) Reset()         { *m = ReadLicenseResponse{} }
func (m *ReadLicenseResponse) String() string { return proto.CompactTextString(m) }
func (*ReadLicenseResponse) ProtoMessage()    {}
func (*ReadLicenseResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_090c1f856632b222, []int{1}
}
func (m *ReadLicenseResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReadLicenseResponse.Unmarshal(m, b)
}
func (m *ReadLicenseResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReadLicenseResponse.Marshal(b, m, deterministic)
}
func (m *ReadLicenseResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadLicenseResponse.Merge(m, src)
}
func (m *ReadLicenseResponse) XXX_Size() int {
	return xxx_messageInfo_ReadLicenseResponse.Size(m)
}
func (m *ReadLicenseResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadLicenseResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ReadLicenseResponse proto.InternalMessageInfo

type RegisterLicenseRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegisterLicenseRequest) Reset()         { *m = RegisterLicenseRequest{} }
func (m *RegisterLicenseRequest) String() string { return proto.CompactTextString(m) }
func (*RegisterLicenseRequest) ProtoMessage()    {}
func (*RegisterLicenseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_090c1f856632b222, []int{2}
}
func (m *RegisterLicenseRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterLicenseRequest.Unmarshal(m, b)
}
func (m *RegisterLicenseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterLicenseRequest.Marshal(b, m, deterministic)
}
func (m *RegisterLicenseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterLicenseRequest.Merge(m, src)
}
func (m *RegisterLicenseRequest) XXX_Size() int {
	return xxx_messageInfo_RegisterLicenseRequest.Size(m)
}
func (m *RegisterLicenseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterLicenseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterLicenseRequest proto.InternalMessageInfo

func (m *RegisterLicenseRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type RegisterLicenseResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegisterLicenseResponse) Reset()         { *m = RegisterLicenseResponse{} }
func (m *RegisterLicenseResponse) String() string { return proto.CompactTextString(m) }
func (*RegisterLicenseResponse) ProtoMessage()    {}
func (*RegisterLicenseResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_090c1f856632b222, []int{3}
}
func (m *RegisterLicenseResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterLicenseResponse.Unmarshal(m, b)
}
func (m *RegisterLicenseResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterLicenseResponse.Marshal(b, m, deterministic)
}
func (m *RegisterLicenseResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterLicenseResponse.Merge(m, src)
}
func (m *RegisterLicenseResponse) XXX_Size() int {
	return xxx_messageInfo_RegisterLicenseResponse.Size(m)
}
func (m *RegisterLicenseResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterLicenseResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterLicenseResponse proto.InternalMessageInfo

type ExtendLicenseRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExtendLicenseRequest) Reset()         { *m = ExtendLicenseRequest{} }
func (m *ExtendLicenseRequest) String() string { return proto.CompactTextString(m) }
func (*ExtendLicenseRequest) ProtoMessage()    {}
func (*ExtendLicenseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_090c1f856632b222, []int{4}
}
func (m *ExtendLicenseRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExtendLicenseRequest.Unmarshal(m, b)
}
func (m *ExtendLicenseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExtendLicenseRequest.Marshal(b, m, deterministic)
}
func (m *ExtendLicenseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExtendLicenseRequest.Merge(m, src)
}
func (m *ExtendLicenseRequest) XXX_Size() int {
	return xxx_messageInfo_ExtendLicenseRequest.Size(m)
}
func (m *ExtendLicenseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ExtendLicenseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ExtendLicenseRequest proto.InternalMessageInfo

func (m *ExtendLicenseRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type ExtendLicenseResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExtendLicenseResponse) Reset()         { *m = ExtendLicenseResponse{} }
func (m *ExtendLicenseResponse) String() string { return proto.CompactTextString(m) }
func (*ExtendLicenseResponse) ProtoMessage()    {}
func (*ExtendLicenseResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_090c1f856632b222, []int{5}
}
func (m *ExtendLicenseResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExtendLicenseResponse.Unmarshal(m, b)
}
func (m *ExtendLicenseResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExtendLicenseResponse.Marshal(b, m, deterministic)
}
func (m *ExtendLicenseResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExtendLicenseResponse.Merge(m, src)
}
func (m *ExtendLicenseResponse) XXX_Size() int {
	return xxx_messageInfo_ExtendLicenseResponse.Size(m)
}
func (m *ExtendLicenseResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ExtendLicenseResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ExtendLicenseResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ReadLicenseRequest)(nil), "grpc.ReadLicenseRequest")
	proto.RegisterType((*ReadLicenseResponse)(nil), "grpc.ReadLicenseResponse")
	proto.RegisterType((*RegisterLicenseRequest)(nil), "grpc.RegisterLicenseRequest")
	proto.RegisterType((*RegisterLicenseResponse)(nil), "grpc.RegisterLicenseResponse")
	proto.RegisterType((*ExtendLicenseRequest)(nil), "grpc.ExtendLicenseRequest")
	proto.RegisterType((*ExtendLicenseResponse)(nil), "grpc.ExtendLicenseResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// LicenseClient is the client API for License service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LicenseClient interface {
	Read(ctx context.Context, in *ReadLicenseRequest, opts ...grpc.CallOption) (*ReadLicenseResponse, error)
	Register(ctx context.Context, in *RegisterLicenseRequest, opts ...grpc.CallOption) (*RegisterLicenseResponse, error)
	Extend(ctx context.Context, in *ExtendLicenseRequest, opts ...grpc.CallOption) (*ExtendLicenseResponse, error)
}

type licenseClient struct {
	cc *grpc.ClientConn
}

func NewLicenseClient(cc *grpc.ClientConn) LicenseClient {
	return &licenseClient{cc}
}

func (c *licenseClient) Read(ctx context.Context, in *ReadLicenseRequest, opts ...grpc.CallOption) (*ReadLicenseResponse, error) {
	out := new(ReadLicenseResponse)
	err := c.cc.Invoke(ctx, "/grpc.License/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *licenseClient) Register(ctx context.Context, in *RegisterLicenseRequest, opts ...grpc.CallOption) (*RegisterLicenseResponse, error) {
	out := new(RegisterLicenseResponse)
	err := c.cc.Invoke(ctx, "/grpc.License/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *licenseClient) Extend(ctx context.Context, in *ExtendLicenseRequest, opts ...grpc.CallOption) (*ExtendLicenseResponse, error) {
	out := new(ExtendLicenseResponse)
	err := c.cc.Invoke(ctx, "/grpc.License/Extend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LicenseServer is the server API for License service.
type LicenseServer interface {
	Read(context.Context, *ReadLicenseRequest) (*ReadLicenseResponse, error)
	Register(context.Context, *RegisterLicenseRequest) (*RegisterLicenseResponse, error)
	Extend(context.Context, *ExtendLicenseRequest) (*ExtendLicenseResponse, error)
}

func RegisterLicenseServer(s *grpc.Server, srv LicenseServer) {
	s.RegisterService(&_License_serviceDesc, srv)
}

func _License_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadLicenseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LicenseServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.License/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LicenseServer).Read(ctx, req.(*ReadLicenseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _License_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterLicenseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LicenseServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.License/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LicenseServer).Register(ctx, req.(*RegisterLicenseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _License_Extend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExtendLicenseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LicenseServer).Extend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.License/Extend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LicenseServer).Extend(ctx, req.(*ExtendLicenseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _License_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.License",
	HandlerType: (*LicenseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Read",
			Handler:    _License_Read_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _License_Register_Handler,
		},
		{
			MethodName: "Extend",
			Handler:    _License_Extend_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "license.proto",
}

func init() { proto.RegisterFile("license.proto", fileDescriptor_090c1f856632b222) }

var fileDescriptor_090c1f856632b222 = []byte{
	// 451 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x93, 0x41, 0x6f, 0xd3, 0x30,
	0x14, 0xc7, 0x69, 0x37, 0x0d, 0xb0, 0x84, 0x84, 0xcc, 0xd6, 0xb5, 0xa6, 0x4c, 0x56, 0x4e, 0x1c,
	0x48, 0xcc, 0xba, 0x1d, 0xb6, 0x9d, 0x48, 0xa5, 0xc1, 0x24, 0x38, 0xa0, 0xc2, 0x05, 0x55, 0x3b,
	0xb8, 0xce, 0xab, 0x67, 0x96, 0xc6, 0xc1, 0x76, 0x43, 0x45, 0x95, 0x0b, 0x47, 0x8e, 0xe5, 0x9b,
	0xf0, 0x55, 0xf8, 0x0a, 0x7c, 0x10, 0xd4, 0x24, 0x9d, 0xb4, 0x36, 0xbb, 0xee, 0x14, 0xe7, 0xbd,
	0x7f, 0xde, 0xef, 0xf9, 0xff, 0x5e, 0xd0, 0x93, 0x58, 0x09, 0x48, 0x2c, 0x04, 0xa9, 0xd1, 0x4e,
	0xe3, 0x6d, 0x69, 0x52, 0x41, 0xba, 0x52, 0x6b, 0x19, 0x03, 0xe3, 0xa9, 0x62, 0x3c, 0x49, 0xb4,
	0xe3, 0x4e, 0xe9, 0xc4, 0x96, 0x1a, 0xf2, 0xaa, 0x78, 0x08, 0x5f, 0x42, 0xe2, 0xdb, 0xef, 0x5c,
	0x4a, 0x30, 0x4c, 0xa7, 0x85, 0x62, 0x53, 0xed, 0x65, 0x08, 0x0f, 0x80, 0x47, 0x1f, 0x4a, 0xcc,
	0x00, 0xbe, 0x4d, 0xc1, 0x3a, 0x3c, 0x44, 0x4d, 0x15, 0xb5, 0x1b, 0xb4, 0xf1, 0xf2, 0x71, 0xff,
	0xfd, 0x22, 0xbc, 0xf8, 0xd5, 0x38, 0x1f, 0xbe, 0xf6, 0x4f, 0x43, 0xff, 0xed, 0xe5, 0xfc, 0x24,
	0xf7, 0x6f, 0xce, 0xc7, 0xb9, 0x3f, 0x3c, 0xbe, 0xbc, 0x79, 0x3d, 0xca, 0xfd, 0xe1, 0xc9, 0x69,
	0xd8, 0xbf, 0x1d, 0x59, 0x9d, 0x0f, 0x7b, 0xf9, 0xa0, 0xa9, 0xa2, 0xb3, 0xad, 0x45, 0xf8, 0xc0,
	0xdb, 0x43, 0xcf, 0x6e, 0x71, 0x6d, 0xaa, 0x13, 0x0b, 0xde, 0x0f, 0xd4, 0x1a, 0x80, 0x54, 0xd6,
	0x81, 0xb9, 0xf7, 0x96, 0x3a, 0x68, 0x7f, 0x83, 0x5d, 0xb5, 0x35, 0x43, 0xbb, 0xe7, 0x33, 0x07,
	0xc9, 0xfd, 0xfb, 0xb4, 0x8f, 0xf6, 0xd6, 0xc8, 0x65, 0x4b, 0xbd, 0x3f, 0x4d, 0xf4, 0xb0, 0x8a,
	0xe1, 0x2f, 0x68, 0x7b, 0x69, 0x26, 0x6e, 0x07, 0xcb, 0xfd, 0x08, 0x36, 0x07, 0x4a, 0x3a, 0x35,
	0x99, 0xea, 0x6e, 0xdd, 0x9f, 0x7f, 0xff, 0xfd, 0x6e, 0xb6, 0xf0, 0x6e, 0xb1, 0x4f, 0xd9, 0x21,
	0xab, 0x56, 0x8e, 0xcd, 0x55, 0x94, 0x63, 0x85, 0x1e, 0xad, 0x4c, 0xc1, 0xdd, 0x55, 0x91, 0xba,
	0x01, 0x91, 0x17, 0x77, 0x64, 0x2b, 0x0c, 0x2d, 0x30, 0xc4, 0x6b, 0xaf, 0x63, 0xcc, 0xaa, 0x3c,
	0x47, 0x3b, 0xe5, 0x55, 0x31, 0x29, 0x4b, 0xd5, 0x59, 0x4e, 0x9e, 0xd7, 0xe6, 0x2a, 0xc8, 0x41,
	0x01, 0x69, 0x93, 0xd6, 0x3a, 0x04, 0x0a, 0x79, 0x7f, 0xbe, 0x08, 0x67, 0x38, 0x43, 0x9d, 0x50,
	0x08, 0xb0, 0x96, 0xbe, 0x9b, 0x72, 0x13, 0x51, 0x6e, 0x29, 0xa7, 0x9f, 0xc0, 0x64, 0x4a, 0x80,
	0xf7, 0x19, 0x1d, 0x94, 0xd1, 0xd4, 0xe8, 0xaf, 0x20, 0x1c, 0xd5, 0x63, 0x7a, 0x31, 0x95, 0x96,
	0x7e, 0x8c, 0xb9, 0x1b, 0x6b, 0x33, 0xc1, 0xf4, 0xca, 0xb9, 0xd4, 0x9e, 0x31, 0x26, 0x95, 0xbb,
	0x9a, 0x8e, 0x02, 0xa1, 0x27, 0xec, 0x9a, 0x4f, 0x54, 0x6c, 0xaf, 0x99, 0x5c, 0x7e, 0x4a, 0x9e,
	0xaa, 0x64, 0xac, 0xdf, 0x68, 0xe1, 0x74, 0xcc, 0x47, 0x81, 0x36, 0xb2, 0xb7, 0x15, 0x41, 0x36,
	0xda, 0x29, 0xfe, 0xb8, 0xa3, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0x2f, 0x86, 0x88, 0xfa, 0xd4,
	0x03, 0x00, 0x00,
}
